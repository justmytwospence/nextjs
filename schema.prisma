generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  email         String?
  emailVerified DateTime?
  image         String?
  name          String?

  accounts   Account[]
  activities UserActivity[]
  routes     UserRoute[]
  segments   UserSegment[]
  sessions   Session[]
}

model Account {
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  access_token      String?
  expires_at        Int?
  id_token          String?
  provider          String
  providerAccountId String
  refresh_token     String?
  scope             String?
  session_state     String?
  token_type        String?
  type              String
  userId            String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
  @@unique([userId, provider])
}

model Session {
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  expires      DateTime
  sessionToken String   @unique
  userId       String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  expires    DateTime
  identifier String
  token      String

  @@id([identifier, token])
}

// TODO: split Routes out from the UserRoute relationship 
model UserRoute {
  id String @id

  createdAt           DateTime @map("created_at")
  description         String?
  distance            Float
  elevationGain       Float    @map("elevation_gain")
  estimatedMovingTime Float    @map("estimated_moving_time")
  name                String
  polyline            Json?
  private             Boolean
  starred             Boolean
  subType             Int      @map("sub_type")
  summaryPolyline     Json     @map("summary_polyline")
  timestamp           DateTime
  type                Int?
  updatedAt           DateTime @map("updated_at")
  userId              String   @map("user_id")

  user     User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  segments UserSegment[]

  @@unique([id, userId])
}

// TODO: split Segments out from the UserSegment relationship
model UserSegment {
  // Required fields from SummarySegment
  id Int @id

  activityType  String  @map("activity_type")
  averageGrade  Float   @map("average_grade")
  city          String?
  climbCategory Int     @map("climb_category")
  country       String?
  distance      Float
  effortCount   Int     @default(0) @map("effort_count")
  elevationHigh Float   @map("elevation_high")
  elevationLow  Float   @map("elevation_low")
  maximumGrade  Float   @map("maximum_grade")
  name          String
  private       Boolean
  state         String
  userId        String  @map("user_id")

  // Optional fields from DetailedSegment
  athleteCount       Int?       @map("athlete_count")
  createdAt          DateTime?  @map("created_at")
  hazardous          Boolean?
  mapResourceState   Int?       @map("map_resource_state")
  polyline           Json?      @map("polyline")
  prActivityId       Int?       @map("pr_activity_id")
  prDate             DateTime?  @map("pr_date")
  prElapsedTime      Int?       @map("pr_elapsed_time")
  starCount          Int?       @map("star_count")
  starred            Boolean?
  summaryPolyline    Json?      @map("summary_polyline")
  totalElevationGain Float?     @map("total_elevation_gain")
  updatedAt          DateTime?  @map("updated_at")
  User               User       @relation(fields: [userId], references: [id])
  UserRoute          UserRoute? @relation(fields: [userRouteId], references: [id])
  userRouteId        String?

  @@unique([id, userId])
}

model UserActivity {
  // Required fields from SummaryActivity
  id String @id

  achievementCount     Int      @map("achievement_count")
  athleteCount         Int      @map("athlete_count")
  averageSpeed         Float?   @map("average_speed")
  averageWatts         Float?   @map("average_watts")
  commentCount         Int      @map("comment_count")
  commute              Boolean
  deviceWatts          Boolean?
  distance             Float
  elapsedTime          Int      @map("elapsed_time")
  elevationHigh        Float?   @map("elevation_high")
  elevationLow         Float?   @map("elevation_low")
  flagged              Boolean
  gearId               String?  @map("gear_id")
  hasKudoed            Boolean  @map("has_kudoed")
  hideFromHome         Boolean  @map("hide_from_home")
  kilojoules           Float?
  kudosCount           Int      @map("kudos_count")
  manual               Boolean
  maxSpeed             Float?   @map("max_speed")
  maxWatts             Int?     @map("max_watts")
  movingTime           Int      @map("moving_time")
  name                 String
  photoCount           Int      @map("photo_count")
  private              Boolean
  sportType            String   @map("sport_type")
  startDate            DateTime @map("start_date")
  startDateLocal       DateTime @map("start_date_local")
  summaryPolyline      Json?    @map("summary_polyline")
  timezone             String
  totalElevationGain   Float    @map("total_elevation_gain")
  totalPhotoCount      Int      @map("total_photo_count")
  trainer              Boolean
  type                 String
  uploadId             String   @map("upload_id")
  userId               String   @map("user_id")
  weightedAverageWatts Int?     @map("weighted_average_watts")
  workoutType          Int?     @map("workout_type")

  // Optional fields from DetailedActivity

  calories       Float?
  description    String?
  deviceName     String? @map("device_name")
  embedToken     String? @map("embed_token")
  laps           Json?
  photos         Json?
  polyline       Json?
  splitsMetric   Json?   @map("splits_metric")
  splitsStandard Json?   @map("splits_standard")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([id, userId])
}
