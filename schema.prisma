generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  email         String?
  emailVerified DateTime?
  image         String?
  name          String?

  accounts   Account[]
  activities Activity[]
  routes     UserRoute[]
  segments   Segment[]
  sessions   Session[]
}

model Account {
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  access_token      String?
  expires_at        Int?
  id_token          String?
  provider          String
  providerAccountId String
  refresh_token     String?
  scope             String?
  session_state     String?
  token_type        String?
  type              String
  userId            String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
  @@unique([userId, provider])
}

model Session {
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  expires      DateTime
  sessionToken String   @unique
  userId       String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  expires    DateTime
  identifier String
  token      String

  @@id([identifier, token])
}

model UserRoute {
  createdAt           DateTime  @map("created_at")
  description         String?
  distance            Float
  elevationGain       Float     @map("elevation_gain")
  estimatedMovingTime Float     @map("estimated_moving_time")
  id                  String    @id
  name                String
  polyline            Json?
  private             Boolean
  starred             Boolean
  subType             Int       @map("sub_type")
  summaryPolyline     Json      @map("summary_polyline")
  timestamp           BigInt
  type                Int?
  updatedAt           DateTime? @map("updated_at")
  userId              String    @map("user_id")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([id, userId])
}

model SegmentEffort {
  activityId       String    @map("activity_id")
  averageCadence   Float?    @map("average_cadence")
  averageHeartrate Float?    @map("average_heartrate")
  averageWatts     Float?    @map("average_watts")
  deviceWatts      Boolean?
  distance         Float?
  elapsedTime      Int?      @map("elapsed_time")
  endIndex         Int?      @map("end_index")
  hidden           Boolean?
  id               String    @id
  isKom            Boolean?  @map("is_kom")
  komRank          Int?      @map("kom_rank")
  maxHeartrate     Float?    @map("max_heartrate")
  movingTime       Int?      @map("moving_time")
  name             String
  prRank           Int?      @map("pr_rank")
  segmentId        String    @map("segment_id")
  startDate        DateTime? @map("start_date")
  startDateLocal   DateTime? @map("start_date_local")
  startIndex       Int?      @map("start_index")

  activity Activity @relation(fields: [activityId], references: [id])
  segment  Segment  @relation(fields: [segmentId], references: [id])
}

model Segment {
  activityType       String?   @map("activity_type")
  athleteCount       Int?      @map("athlete_count")
  averageGrade       Float?    @map("average_grade")
  city               String?
  climbCategory      Int?      @map("climb_category")
  country            String?
  createdAt          DateTime? @map("created_at")
  distance           Float?
  effortCount        Int?      @map("effort_count")
  elevationHigh      Float?    @map("elevation_high")
  elevationLow       Float?    @map("elevation_low")
  hazardous          Boolean?
  id                 String    @id
  maximumGrade       Float?    @map("maximum_grade")
  name               String?
  polyline           Json?
  private            Boolean?
  starCount          Int?      @map("star_count")
  state              String?
  totalElevationGain Float?    @map("total_elevation_gain")
  updatedAt          DateTime? @map("updated_at")

  userId String @map("user_id")

  User          User            @relation(fields: [userId], references: [id])
  SegmentEffort SegmentEffort[]

  @@unique([id, userId])
}

model Activity {
  // Fields from SummaryActivity
  achievementCount     Int       @map("achievement_count")
  athleteCount         Int?      @map("athlete_count")
  averageSpeed         Float?    @map("average_speed")
  averageWatts         Float?    @map("average_watts")
  commentCount         Int?      @map("comment_count")
  commute              Boolean?
  deviceWatts          Boolean?
  distance             Float?
  elapsedTime          Int?      @map("elapsed_time")
  elevHigh             Float?    @map("elev_high")
  elevLow              Float?    @map("elev_low")
  flagged              Boolean?
  gearId               String?   @map("gear_id")
  hasKudoed            Boolean?  @map("has_kudoed")
  hideFromHome         Boolean?  @map("hide_from_home")
  id                   String    @id
  kilojoules           Float?
  kudosCount           Int?      @map("kudos_count")
  manual               Boolean?
  maxSpeed             Float?    @map("max_speed")
  maxWatts             Int?      @map("max_watts")
  movingTime           Int       @map("moving_time")
  name                 String
  photoCount           Int?      @map("photo_count")
  private              Boolean?
  sportType            String?   @map("sport_type")
  startDate            DateTime? @map("start_date")
  startDateLocal       DateTime? @map("start_date_local")
  summaryPolyline      Json?     @map("summary_polyline")
  timezone             String?
  totalElevationGain   Float?    @map("total_elevation_gain")
  totalPhotoCount      Int?      @map("total_photo_count")
  trainer              Boolean?
  type                 String?
  uploadId             String?   @map("upload_id")
  weightedAverageWatts Int?      @map("weightedkaverage_watts")
  workoutType          Int?      @map("workout_type")

  // Fields from DetailedActivity

  calories       Float?
  description    String?
  deviceName     String? @map("device_name")
  embedToken     String? @map("embed_token")
  laps           Json?
  photos         Json?
  polyline       Json?
  splitsMetric   Json?   @map("splits_metric")
  splitsStandard Json?   @map("splits_standard")

  userId String @map("user_id")

  // Relations
  user          User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  SegmentEffort SegmentEffort[]

  @@unique([id, userId])
}
